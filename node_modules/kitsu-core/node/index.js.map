{"version":3,"file":"index.js","sources":["../src/deattribute/index.js","../src/error/index.js","../src/filterIncludes/index.js","../src/linkRelationships/index.js","../src/deserialise/index.js","../src/query/index.js","../src/serialise/index.js","../src/camel/index.js","../src/kebab/index.js","../src/snake/index.js"],"sourcesContent":["/**\n * Hoists attributes to be top-level\n *\n * @param {Object|Array} data Resource data\n * @returns {Object|Array} Deattributed resource data\n *\n * @example <caption>Deattribute an array of resources</caption>\n * // JSON:API 'data' field\n * const data = [\n *   {\n *     id: '1',\n *     type: 'users',\n *     attributes: { slug: 'wopian' }\n *   }\n * ]\n *\n * const output = await deattribute(data) // [ { id: '1', type: 'users', slug: 'wopian' } ]\n *\n * @example <caption>Deattribute a resource</caption>\n * // JSON:API 'data' field\n * const data = {\n *   id: '1',\n *   type: 'users',\n *   attributes: { slug: 'wopian' }\n * }\n *\n * const output = await deattribute(data) // { id: '1', type: 'users', slug: 'wopian' }\n */\nexport async function deattribute (data) {\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) await data.map(async el => deattribute(el))\n    else if (data.attributes && data.attributes.constructor === Object) {\n      Object.keys(data.attributes).forEach(key => { data[key] = data.attributes[key] })\n      delete data.attributes\n    }\n  }\n  return data\n}\n","/**\n * Mutates an error and rethrows it\n *\n * @param {Object} E The Error\n * @throws {Object} The mutated Error\n */\nexport function error (E) {\n  if (E.response) {\n    const e = E.response.data\n    if (e && e.errors) E.errors = e.errors\n  }\n  throw E\n}\n","import { error } from '../error'\n\n/**\n * Filters includes for the specific relationship\n *\n * @param {Object} included The response included object\n * @param {Object} opts\n * @param {string} opts.id The relationship ID\n * @param {string} opts.type The relationship type\n * @returns {Array} The matched includes\n */\nexport async function filterIncludes (included, { id, type }) {\n  try {\n    const filtered = included.filter(el => {\n      return el.id === id && el.type === type\n    })[0] || { id, type }\n    return Object.assign({}, filtered)\n  } catch (E) {\n    error(E)\n  }\n}\n","import { deattribute } from '../deattribute'\nimport { filterIncludes } from '../filterIncludes'\n\n/**\n * Core function to link relationships to included data\n *\n * @param {Object} resource The included resource\n * @param {string} resource.id Resource ID\n * @param {string} resource.type Resource type\n * @param {Object} resource.meta Meta information\n * @param {Object} included The response included object\n * @private\n */\nasync function link ({ id, type, meta }, included) {\n  const filtered = await filterIncludes(included, { id, type })\n  if (filtered.relationships) await linkRelationships(filtered, included)\n  if (meta) filtered.meta = meta\n  return deattribute(filtered)\n}\n\n/**\n * Helper function for multiple relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkArray (data, included, key) {\n  data[key] = []\n  for (let resource of await data.relationships[key].data) {\n    data[key].push(await link(resource, included))\n  }\n}\n\n/**\n * Helper function for single relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkObject (data, included, key) {\n  data[key] = await link(data.relationships[key].data, included)\n  delete data[key].relationships\n}\n\n/**\n * Links relationships to included data\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n */\nexport async function linkRelationships (data, included) {\n  const { relationships } = data\n  let removeRelationships = false\n\n  for (let key in await relationships) {\n    // Relationship contains collection of resources\n    if (relationships[key].data && Array.isArray(relationships[key].data)) {\n      await linkArray(data, included, key)\n      removeRelationships = true\n    // Relationship contains a single resource\n    } else if (relationships[key].data) {\n      await linkObject(data, included, key)\n      removeRelationships = true\n    }\n  }\n\n  if (removeRelationships) delete data.relationships\n\n  return data\n}\n","import { deattribute } from '../deattribute'\nimport { linkRelationships } from '../linkRelationships'\n\n/**\n * Deserialises an array from a JSON-API structure\n *\n * @param {*} obj The response\n * @returns {Object} The deserialised response\n * @private\n */\nasync function deserialiseArray (obj) {\n  for (let value of await obj.data) {\n    if (obj.included) value = await linkRelationships(value, obj.included)\n    if (value.attributes) value = await deattribute(value)\n    obj.data[obj.data.indexOf(value)] = value\n  }\n  return obj\n}\n\n/**\n * Deserialises a JSON-API response\n *\n * @param {Object} obj The response\n * @returns {Object} The deserialised response\n *\n * @example <caption>Deserialise with a basic data object</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     attributes: { liked: true }\n *   },\n *   meta: { hello: 'world' }\n * }) // { data: { id: '1', liked: true }, meta: { hello: 'world' } }\n *\n * @example <caption>Deserialise with relationships</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     relationships: {\n *       user: {\n *         data: {\n *           type: 'users',\n *           id: '2' }\n *       }\n *     }\n *   },\n *   included: [\n *     {\n *       type: 'users',\n *       id: '2',\n *       attributes: { slug: 'wopian' }\n *     }\n *   ]\n * }) // { data: { id: '1', user: { type: 'users', id: '2', slug: 'wopian' } } }\n */\nexport async function deserialise (obj) {\n  // Collection of resources\n  // Note: constructor is currently faster than isArray()\n  // http://jsben.ch/QgYAV\n  if (obj.data && obj.data.constructor === Array) obj = await deserialiseArray(obj)\n  // Single resource with included relationships\n  else if (obj.included) obj.data = await linkRelationships(obj.data, obj.included)\n\n  delete obj.included\n\n  // Move attributes to the parent object\n  if (obj.data && obj.data.attributes) obj.data = await deattribute(obj.data)\n\n  return obj\n}\n","function deObject (obj, param) {\n  let query = ''\n  for (let key in obj) {\n    let value = obj[key]\n    if (param) query += `&${param}`\n    if (typeof value === 'object') query += `[${key}]${deObject(value)}`\n    else query += `[${key}]=${value}`\n  }\n  return query\n}\n\n/**\n * Constructs a URL query string for JSON:API parameters\n *\n * @param {Object} params Parameters to parse\n * @param {boolean} prefix Prefix returned string with `?` (default `false`)\n * @returns {string} URL query string\n */\nexport function query (params, prefix = false) {\n  let query = ''\n  for (let param in params) {\n    let value = params[param]\n    if (typeof value === 'object') query += deObject(value, param)\n    else query += `&${param}=${value}`\n  }\n  query = encodeURI(query.slice(1))\n  return params ? (prefix ? `?${query}` : query) : ''\n}\n","import { error } from '../error'\n\nconst requiresID = (method, key) => `${method} requires an ID for the ${key} relationships`\n\n/**\n * Serialises an object into a JSON-API structure\n *\n * @param {string} model Request model\n * @param {Object} obj The data\n * @param {string} method Request type\n * @returns {Object} The serialised data\n *\n * @example <caption>Due to its usage in kitsu, it **MUST** be called with **this** set in 5.0.x</caption>\n * import { serialise, camel, kebab } from 'kitsu-core'\n * import plural from 'pluralize'\n *\n * const output = await serialise.apply({ camel, resCase: kebab, plural }, [ model, obj, 'PATCH' ])\n */\nexport async function serialise (model, obj = {}, method = 'POST') {\n  try {\n    // Check if obj is not an object or empty\n    if (obj.constructor !== Object || Object.keys(obj).length === 0) {\n      throw new Error(`${method} requires a JSON object body`)\n    }\n    const type = this.plural(this.camel(model))\n    const data = { type }\n\n    // A POST request is the only request to not require an ID\n    if (method !== 'POST' && !obj.id) {\n      throw new Error(`${method} requires an ID for the ${type} type`)\n    }\n\n    // Add ID to data - MUST be a string\n    if (method !== 'POST') {\n      data.id = obj.id.toString()\n    }\n\n    // Attributes and relationships\n    for (let key in obj) {\n      // Check if it's a relationship\n      if (obj[key] !== null && obj[key].constructor === Object) {\n        if (typeof obj[key].id === 'string') {\n          if (!data.relationships) data.relationships = {}\n          // Guess relationship type if not provided\n          if (!obj[key].type) obj[key].type = this.plural(this.camel(key))\n          data.relationships[key] = { data: Object.assign(obj[key]) }\n        } else throw new Error(requiresID(method, key))\n      // Check if it's a relationship array\n      } else if (obj[key] !== null && Array.isArray(obj[key])) {\n        // validate whole array\n        const keytype = this.plural(this.camel(key))\n        if (!data.relationships) data.relationships = {}\n        data.relationships[key] = { data: obj[key].map(elem => {\n          if (!elem.id) throw new Error(requiresID(method, key))\n          return {\n            id: elem.id,\n            type: elem.type || keytype\n          }\n        }) }\n      } else if (key !== 'id' && key !== 'type') { // Its an attribute\n        if (!data.attributes) data.attributes = {}\n        data.attributes[key] = obj[key]\n      }\n    }\n    return { data }\n  } catch (E) {\n    throw error(E)\n  }\n}\n","/**\n * Converts kebab-case and snake_case into camelCase\n *\n * @name camel\n * @param {string} s String to convert\n * @returns {string} camelCase formatted string\n *\n * @example <caption>Convert kebab-case</caption>\n * camel('hello-world') // 'helloWorld'\n *\n * @example <caption>Convert snake_case</caption>\n * camel('hello_world') // 'helloWorld'\n */\nexport default s => s.replace(/[-_][a-z\\u00E0-\\u00F6\\u00F8-\\u00FE]/g, match => match.slice(1).toUpperCase())\n","/**\n * Converts camelCase into kebab-case\n *\n * @name kebab\n * @param {string} s camelCase string\n * @returns {string} kekab-case formatted string\n *\n * @example\n * kebab('helloWorld') // 'hello-world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '-' + match.toLowerCase())\n","/**\n * Converts camelCase into snake_case\n *\n * @name snake\n * @param {string} s camelCase string\n * @returns {string} snake_case formatted string\n *\n * @example\n * snake('helloWorld') // 'hello_world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '_' + match.toLowerCase())\n"],"names":["data","Array","isArray","map","el","deattribute","attributes","constructor","Object","keys","forEach","key","error","E","response","e","errors","included","id","type","filtered","filter","assign","meta","filterIncludes","relationships","linkRelationships","resource","push","link","removeRelationships","linkArray","linkObject","obj","value","indexOf","deserialiseArray","deObject","param","query","params","prefix","encodeURI","slice","requiresID","method","model","length","Error","plural","camel","toString","keytype","elem","s","replace","match","toUpperCase","charAt","toLowerCase"],"mappings":"oPA4BA,8CAAO,UAA4BA,CAA5B,CAAkC,OACnB,QAAhB,QAAOA,EAAP,EAAqC,IAATA,OAC1BC,MAAMC,OAAND,CAAcD,CAAdC,EAAqB,KAAMD,GAAKG,GAALH,+BAAS,UAAMI,CAAN,QAAYC,aAAYD,CAAZC,CAArB,wDAAAL,EACtBA,EAAKM,UAALN,EAAmBA,EAAKM,UAALN,CAAgBO,WAAhBP,GAAgCQ,gBACnDC,KAAKT,EAAKM,YAAYI,QAAQ,UAAA,CAAO,GAAOC,GAAOX,EAAKM,UAALN,CAAgBW,CAAhBX,CAA1D,SACOA,GAAKM,aAGTN,CART,wDAAA,CCtBA,QAAgBY,MAAhB,CAAuBC,CAAvB,CAA0B,IACpBA,EAAEC,SAAU,MACRC,GAAIF,EAAEC,QAAFD,CAAWb,KACjBe,GAAKA,EAAEC,MAFG,GAEKH,EAAEG,MAAFH,CAAWE,EAAEC,MAFlB,OAIVH,oDCAD,UAA+BI,CAA/B,CAAyC,CAAEC,IAAF,CAAMC,MAAN,CAAzC,CAAuD,IACxD,MACIC,GAAWH,EAASI,MAATJ,CAAgB,UAAA,CAAM,OAC9Bb,GAAGc,EAAHd,GAAUc,CAAVd,EAAgBA,EAAGe,IAAHf,GAAYe,CADpB,CAAAF,EAEd,CAFcA,GAER,CAAEC,IAAF,CAAMC,MAAN,QACFX,QAAOc,MAAPd,CAAc,EAAdA,CAAkBY,CAAlBZ,CAJT,CAKE,MAAOK,CAAP,CAAU,OACJA,GAPV,4FCEA,UAAqB,CAAEK,IAAF,CAAMC,MAAN,CAAYI,MAAZ,CAArB,CAAyCN,CAAzC,CAAmD,MAC3CG,GAAW,KAAMI,gBAAeP,CAAfO,CAAyB,CAAEN,IAAF,CAAMC,MAAN,CAAzBK,QACnBJ,GAASK,gBAAe,KAAMC,mBAAkBN,CAAlBM,CAA4BT,CAA5BS,GAC9BH,IAAMH,EAASG,IAATH,CAAgBG,GACnBlB,YAAYe,CAAZf,kGAWT,UAA0BL,CAA1B,CAAgCiB,CAAhC,CAA0CN,CAA1C,CAA+C,GACxCA,GAAO,EADiC,SAAA,KAAA,SAAA,kBAExB,KAAMX,GAAKyB,aAALzB,CAAmBW,CAAnBX,EAAwBA,qDAAM,IAAhD2B,aACFhB,GAAKiB,MAAK,KAAMC,MAAKF,CAALE,CAAeZ,CAAfY,oLAYzB,UAA2B7B,CAA3B,CAAiCiB,CAAjC,CAA2CN,CAA3C,CAAgD,GACzCA,GAAO,KAAMkB,MAAK7B,EAAKyB,aAALzB,CAAmBW,CAAnBX,EAAwBA,IAA7B6B,CAAmCZ,CAAnCY,CAD4B,OAEvC7B,GAAKW,CAALX,EAAUyB,sHASZ,UAAkCzB,CAAlC,CAAwCiB,CAAxC,CAAkD,MAC/CQ,GAAkBzB,EAAlByB,iBACJK,UAEC,GAAInB,KAAO,MAAMc,GAEhBA,EAAcd,CAAdc,EAAmBzB,IAAnByB,EAA2BxB,MAAMC,OAAND,CAAcwB,EAAcd,CAAdc,EAAmBzB,IAAjCC,QACvB8B,WAAU/B,CAAV+B,CAAgBd,CAAhBc,CAA0BpB,CAA1BoB,QAGGN,EAAcd,CAAdc,EAAmBzB,YACtBgC,YAAWhC,CAAXgC,CAAiBf,CAAjBe,CAA2BrB,CAA3BqB,cAKNF,IAAqB,MAAO9B,GAAKyB,cAE9BzB,CAlBT,wGC5CA,UAAiCiC,CAAjC,CAAsC,SAAA,KAAA,SAAA,kBAClB,KAAMA,GAAIjC,qDAAM,IAAzBkC,WACHD,EAAIhB,QADwB,GACdiB,EAAQ,KAAMR,mBAAkBQ,CAAlBR,CAAyBO,EAAIhB,QAA7BS,CADA,EAE5BQ,EAAM5B,UAFsB,GAEV4B,EAAQ,KAAM7B,aAAY6B,CAAZ7B,CAFJ,IAG5BL,KAAKiC,EAAIjC,IAAJiC,CAASE,OAATF,CAAiBC,CAAjBD,GAA2BC,sFAE/BD,qGAuCF,UAA4BA,CAA5B,CAAiC,OAIlCA,GAAIjC,IAAJiC,EAAYA,EAAIjC,IAAJiC,CAAS1B,WAAT0B,GAAyBhC,MAAOgC,EAAM,KAAMG,kBAAiBH,CAAjBG,EAEnDH,EAAIhB,WAAUgB,EAAIjC,IAAJiC,CAAW,KAAMP,mBAAkBO,EAAIjC,IAAtB0B,CAA4BO,EAAIhB,QAAhCS,SAEjCO,GAAIhB,SAGPgB,EAAIjC,IAAJiC,EAAYA,EAAIjC,IAAJiC,CAAS3B,aAAY2B,EAAIjC,IAAJiC,CAAW,KAAM5B,aAAY4B,EAAIjC,IAAhBK,GAE/C4B,CAbT,yDCvDA,QAASI,SAAT,CAAmBJ,CAAnB,CAAwBK,CAAxB,CAA+B,IACzBC,GAAQ,OACP,GAAI5B,KAAOsB,GAAK,IACfC,GAAQD,EAAItB,CAAJsB,EACRK,CAFe,GAERC,OAAaD,GAFL,EAGYC,CAHZ,EAGE,QAAjB,QAAOL,EAHQ,KAGyBvB,KAAO0B,SAASH,CAATG,GAHhC,KAID1B,MAAQuB,UAErBK,GAUT,QAAgBA,MAAhB,CAAuBC,CAAvB,CAA+BC,IAA/B,CAA+C,IACzCF,GAAQ,OACP,GAAID,KAASE,GAAQ,IACpBN,GAAQM,EAAOF,CAAPE,EACmBD,CAFP,EAEH,QAAjB,QAAOL,EAFa,CAEgBG,SAASH,CAATG,CAAgBC,CAAhBD,CAFhB,KAGNC,KAASJ,aAErBQ,UAAUH,EAAMI,KAANJ,CAAY,CAAZA,CAAVG,EACDF,EAAUC,MAAaF,GAAbE,CAAuBF,CAAjCC,CAA0C,QCxB7CI,YAAa,CAACC,CAAD,CAASlC,CAAT,MAAoBkC,4BAAiClC,kBAgBxE,4CAAO,UAA0BmC,CAA1B,CAAiCb,EAAM,EAAvC,CAA2CY,EAAS,MAApD,CAA4D,IAC7D,IAEEZ,EAAI1B,WAAJ0B,GAAoBzB,MAApByB,EAA0D,CAA5BzB,UAAOC,IAAPD,CAAYyB,CAAZzB,EAAiBuC,YAC3C,IAAIC,MAAJ,IAAaH,+BAAb,EAHN,KAKI1B,GAAO,KAAK8B,MAAL,CAAY,KAAKC,KAAL,CAAWJ,CAAX,CAAZ,CALX,CAMI9C,EAAO,CAAEmB,MAAF,CANX,CASF,GAAe,MAAX0B,MAAqB,CAACZ,EAAIf,EAA9B,MACQ,IAAI8B,MAAJ,IAAaH,4BAAiC1B,QAA9C,MASH,GAAIR,KALM,MAAXkC,SACG3B,GAAKe,EAAIf,EAAJe,CAAOkB,QAAPlB,IAIIA,KAEG,IAAbA,KAAItB,CAAJsB,GAAqBA,EAAItB,CAAJsB,EAAS1B,WAAT0B,GAAyBzB,WACrB,QAAvB,QAAOyB,GAAItB,CAAJsB,EAASf,GACblB,EAAKyB,gBAAezB,EAAKyB,aAALzB,CAAqB,IAEzCiC,EAAItB,CAAJsB,EAASd,OAAMc,EAAItB,CAAJsB,EAASd,IAATc,CAAgB,KAAKgB,MAAL,CAAY,KAAKC,KAAL,CAAWvC,CAAX,CAAZ,KAC/Bc,cAAcd,GAAO,CAAEX,KAAMQ,OAAOc,MAAPd,CAAcyB,EAAItB,CAAJsB,CAAdzB,CAAR,MACrB,MAAM,IAAIwC,MAAJ,CAAUJ,WAAWC,CAAXD,CAAmBjC,CAAnBiC,CAAV,CAAN,MAEF,IAAiB,IAAbX,KAAItB,CAAJsB,GAAqBhC,MAAMC,OAAND,CAAcgC,EAAItB,CAAJsB,CAAdhC,CAAzB,CAAkD,MAEjDmD,GAAU,KAAKH,MAAL,CAAY,KAAKC,KAAL,CAAWvC,CAAX,CAAZ,EACXX,EAAKyB,aAH6C,GAG9BzB,EAAKyB,aAALzB,CAAqB,EAHS,IAIlDyB,cAAcd,GAAO,CAAEX,KAAMiC,EAAItB,CAAJsB,EAAS9B,GAAT8B,CAAa,UAAA,CAAQ,IACjD,CAACoB,EAAKnC,GAAI,KAAM,IAAI8B,MAAJ,CAAUJ,WAAWC,CAAXD,CAAmBjC,CAAnBiC,CAAV,CAAN,OACP,IACDS,EAAKnC,EADJ,MAECmC,EAAKlC,IAALkC,EAAaD,CAFd,CAFyB,CAAAnB,CAAR,CAJrB,CAAA,IAWY,IAARtB,MAAwB,MAARA,IAXpB,GAYAX,EAAKM,UAZL,GAYiBN,EAAKM,UAALN,CAAkB,EAZnC,IAaAM,WAAWK,GAAOsB,EAAItB,CAAJsB,CAblB,QAgBF,CAAEjC,MAAF,CA7CT,CA8CE,MAAOa,CAAP,CAAU,MACJD,OAAMC,CAAND,EAhDV,wDAAA,WCLe0C,GAAKA,EAAEC,OAAFD,CAAU,sCAAVA,CAAkDE,GAASA,EAAMb,KAANa,CAAY,CAAZA,EAAeC,WAAfD,EAA3DF,UCHLA,GAAKA,EAAEI,MAAFJ,CAAS,CAATA,EAAYK,WAAZL,GAA4BA,EAAEX,KAAFW,CAAQ,CAARA,EAAWC,OAAXD,CAAmB,kCAAnBA,CAAuDE,GAAS,IAAMA,EAAMG,WAANH,EAAtEF,UCAjCA,GAAKA,EAAEI,MAAFJ,CAAS,CAATA,EAAYK,WAAZL,GAA4BA,EAAEX,KAAFW,CAAQ,CAARA,EAAWC,OAAXD,CAAmB,kCAAnBA,CAAuDE,GAAS,IAAMA,EAAMG,WAANH,EAAtEF"}