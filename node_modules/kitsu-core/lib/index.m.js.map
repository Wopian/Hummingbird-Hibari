{"version":3,"file":"index.m.js","sources":["../src/deattribute/index.js","../src/error/index.js","../src/filterIncludes/index.js","../src/linkRelationships/index.js","../src/deserialise/index.js","../src/query/index.js","../src/serialise/index.js","../src/camel/index.js","../src/kebab/index.js","../src/snake/index.js"],"sourcesContent":["/**\n * Hoists attributes to be top-level\n *\n * @param {Object|Array} data Resource data\n * @returns {Object|Array} Deattributed resource data\n *\n * @example <caption>Deattribute an array of resources</caption>\n * // JSON:API 'data' field\n * const data = [\n *   {\n *     id: '1',\n *     type: 'users',\n *     attributes: { slug: 'wopian' }\n *   }\n * ]\n *\n * const output = await deattribute(data) // [ { id: '1', type: 'users', slug: 'wopian' } ]\n *\n * @example <caption>Deattribute a resource</caption>\n * // JSON:API 'data' field\n * const data = {\n *   id: '1',\n *   type: 'users',\n *   attributes: { slug: 'wopian' }\n * }\n *\n * const output = await deattribute(data) // { id: '1', type: 'users', slug: 'wopian' }\n */\nexport async function deattribute (data) {\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) await data.map(async el => deattribute(el))\n    else if (data.attributes && data.attributes.constructor === Object) {\n      Object.keys(data.attributes).forEach(key => { data[key] = data.attributes[key] })\n      delete data.attributes\n    }\n  }\n  return data\n}\n","/**\n * Mutates an error and rethrows it\n *\n * @param {Object} E The Error\n * @throws {Object} The mutated Error\n */\nexport function error (E) {\n  if (E.response) {\n    const e = E.response.data\n    if (e && e.errors) E.errors = e.errors\n  }\n  throw E\n}\n","import { error } from '../error'\n\n/**\n * Filters includes for the specific relationship\n *\n * @param {Object} included The response included object\n * @param {Object} opts\n * @param {string} opts.id The relationship ID\n * @param {string} opts.type The relationship type\n * @returns {Array} The matched includes\n */\nexport async function filterIncludes (included, { id, type }) {\n  try {\n    const filtered = included.filter(el => {\n      return el.id === id && el.type === type\n    })[0] || { id, type }\n    return Object.assign({}, filtered)\n  } catch (E) {\n    error(E)\n  }\n}\n","import { deattribute } from '../deattribute'\nimport { filterIncludes } from '../filterIncludes'\n\n/**\n * Core function to link relationships to included data\n *\n * @param {Object} resource The included resource\n * @param {string} resource.id Resource ID\n * @param {string} resource.type Resource type\n * @param {Object} resource.meta Meta information\n * @param {Object} included The response included object\n * @private\n */\nasync function link ({ id, type, meta }, included) {\n  const filtered = await filterIncludes(included, { id, type })\n  if (filtered.relationships) await linkRelationships(filtered, included)\n  if (meta) filtered.meta = meta\n  return deattribute(filtered)\n}\n\n/**\n * Helper function for multiple relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkArray (data, included, key) {\n  data[key] = []\n  for (let resource of await data.relationships[key].data) {\n    data[key].push(await link(resource, included))\n  }\n}\n\n/**\n * Helper function for single relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkObject (data, included, key) {\n  data[key] = await link(data.relationships[key].data, included)\n  delete data[key].relationships\n}\n\n/**\n * Links relationships to included data\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n */\nexport async function linkRelationships (data, included) {\n  const { relationships } = data\n  let removeRelationships = false\n\n  for (let key in await relationships) {\n    // Relationship contains collection of resources\n    if (relationships[key].data && Array.isArray(relationships[key].data)) {\n      await linkArray(data, included, key)\n      removeRelationships = true\n    // Relationship contains a single resource\n    } else if (relationships[key].data) {\n      await linkObject(data, included, key)\n      removeRelationships = true\n    }\n  }\n\n  if (removeRelationships) delete data.relationships\n\n  return data\n}\n","import { deattribute } from '../deattribute'\nimport { linkRelationships } from '../linkRelationships'\n\n/**\n * Deserialises an array from a JSON-API structure\n *\n * @param {*} obj The response\n * @returns {Object} The deserialised response\n * @private\n */\nasync function deserialiseArray (obj) {\n  for (let value of await obj.data) {\n    if (obj.included) value = await linkRelationships(value, obj.included)\n    if (value.attributes) value = await deattribute(value)\n    obj.data[obj.data.indexOf(value)] = value\n  }\n  return obj\n}\n\n/**\n * Deserialises a JSON-API response\n *\n * @param {Object} obj The response\n * @returns {Object} The deserialised response\n *\n * @example <caption>Deserialise with a basic data object</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     attributes: { liked: true }\n *   },\n *   meta: { hello: 'world' }\n * }) // { data: { id: '1', liked: true }, meta: { hello: 'world' } }\n *\n * @example <caption>Deserialise with relationships</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     relationships: {\n *       user: {\n *         data: {\n *           type: 'users',\n *           id: '2' }\n *       }\n *     }\n *   },\n *   included: [\n *     {\n *       type: 'users',\n *       id: '2',\n *       attributes: { slug: 'wopian' }\n *     }\n *   ]\n * }) // { data: { id: '1', user: { type: 'users', id: '2', slug: 'wopian' } } }\n */\nexport async function deserialise (obj) {\n  // Collection of resources\n  // Note: constructor is currently faster than isArray()\n  // http://jsben.ch/QgYAV\n  if (obj.data && obj.data.constructor === Array) obj = await deserialiseArray(obj)\n  // Single resource with included relationships\n  else if (obj.included) obj.data = await linkRelationships(obj.data, obj.included)\n\n  delete obj.included\n\n  // Move attributes to the parent object\n  if (obj.data && obj.data.attributes) obj.data = await deattribute(obj.data)\n\n  return obj\n}\n","function deObject (obj, param) {\n  let query = ''\n  for (let key in obj) {\n    let value = obj[key]\n    if (param) query += `&${param}`\n    if (typeof value === 'object') query += `[${key}]${deObject(value)}`\n    else query += `[${key}]=${value}`\n  }\n  return query\n}\n\n/**\n * Constructs a URL query string for JSON:API parameters\n *\n * @param {Object} params Parameters to parse\n * @param {boolean} prefix Prefix returned string with `?` (default `false`)\n * @returns {string} URL query string\n */\nexport function query (params, prefix = false) {\n  let query = ''\n  for (let param in params) {\n    let value = params[param]\n    if (typeof value === 'object') query += deObject(value, param)\n    else query += `&${param}=${value}`\n  }\n  query = encodeURI(query.slice(1))\n  return params ? (prefix ? `?${query}` : query) : ''\n}\n","import { error } from '../error'\n\nconst requiresID = (method, key) => `${method} requires an ID for the ${key} relationships`\n\n/**\n * Serialises an object into a JSON-API structure\n *\n * @param {string} model Request model\n * @param {Object} obj The data\n * @param {string} method Request type\n * @returns {Object} The serialised data\n *\n * @example <caption>Due to its usage in kitsu, it **MUST** be called with **this** set in 5.0.x</caption>\n * import { serialise, camel, kebab } from 'kitsu-core'\n * import plural from 'pluralize'\n *\n * const output = await serialise.apply({ camel, resCase: kebab, plural }, [ model, obj, 'PATCH' ])\n */\nexport async function serialise (model, obj = {}, method = 'POST') {\n  try {\n    // Check if obj is not an object or empty\n    if (obj.constructor !== Object || Object.keys(obj).length === 0) {\n      throw new Error(`${method} requires a JSON object body`)\n    }\n    const type = this.plural(this.camel(model))\n    const data = { type }\n\n    // A POST request is the only request to not require an ID\n    if (method !== 'POST' && !obj.id) {\n      throw new Error(`${method} requires an ID for the ${type} type`)\n    }\n\n    // Add ID to data - MUST be a string\n    if (method !== 'POST') {\n      data.id = obj.id.toString()\n    }\n\n    // Attributes and relationships\n    for (let key in obj) {\n      // Check if it's a relationship\n      if (obj[key] !== null && obj[key].constructor === Object) {\n        if (typeof obj[key].id === 'string') {\n          if (!data.relationships) data.relationships = {}\n          // Guess relationship type if not provided\n          if (!obj[key].type) obj[key].type = this.plural(this.camel(key))\n          data.relationships[key] = { data: Object.assign(obj[key]) }\n        } else throw new Error(requiresID(method, key))\n      // Check if it's a relationship array\n      } else if (obj[key] !== null && Array.isArray(obj[key])) {\n        // validate whole array\n        const keytype = this.plural(this.camel(key))\n        if (!data.relationships) data.relationships = {}\n        data.relationships[key] = { data: obj[key].map(elem => {\n          if (!elem.id) throw new Error(requiresID(method, key))\n          return {\n            id: elem.id,\n            type: elem.type || keytype\n          }\n        }) }\n      } else if (key !== 'id' && key !== 'type') { // Its an attribute\n        if (!data.attributes) data.attributes = {}\n        data.attributes[key] = obj[key]\n      }\n    }\n    return { data }\n  } catch (E) {\n    throw error(E)\n  }\n}\n","/**\n * Converts kebab-case and snake_case into camelCase\n *\n * @name camel\n * @param {string} s String to convert\n * @returns {string} camelCase formatted string\n *\n * @example <caption>Convert kebab-case</caption>\n * camel('hello-world') // 'helloWorld'\n *\n * @example <caption>Convert snake_case</caption>\n * camel('hello_world') // 'helloWorld'\n */\nexport default s => s.replace(/[-_][a-z\\u00E0-\\u00F6\\u00F8-\\u00FE]/g, match => match.slice(1).toUpperCase())\n","/**\n * Converts camelCase into kebab-case\n *\n * @name kebab\n * @param {string} s camelCase string\n * @returns {string} kekab-case formatted string\n *\n * @example\n * kebab('helloWorld') // 'hello-world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '-' + match.toLowerCase())\n","/**\n * Converts camelCase into snake_case\n *\n * @name snake\n * @param {string} s camelCase string\n * @returns {string} snake_case formatted string\n *\n * @example\n * snake('helloWorld') // 'hello_world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '_' + match.toLowerCase())\n"],"names":["deattribute","data","Array","isArray","map","el","then","attributes","constructor","Object","keys","forEach","key","error","E","response","const","e","errors","filterIncludes","included","ref","id","type","filtered","filter","assign","link","meta","$await_15","relationships","linkRelationships","removeRelationships","$await_20","resource","push","$await_17","$await_18","linkArray","$await_19","linkObject","deserialise","obj","value","$await_10","$await_11","indexOf","$await_12","deserialiseArray","$await_13","$await_14","deObject","param","let","query","params","prefix","encodeURI","slice","requiresID","method","serialise","model","length","Error","this","plural","camel","toString","keytype","elem","s","replace","match","toUpperCase","charAt","toLowerCase"],"mappings":"AA4BO,SAAeA,EAAaC,GAA5B,iCACL,GAAoB,iBAATA,GAA8B,OAATA,EAAe,CAC7C,OAAIC,MAAMC,QAAQF,GAAaA,EAAKG,aAAUC,6CAAML,EAAYK,QAAvCC,+EAChBL,EAAKM,YAAcN,EAAKM,WAAWC,cAAgBC,SAC1DA,OAAOC,KAAKT,EAAKM,YAAYI,iBAAQC,GAASX,EAAKW,GAAOX,EAAKM,WAAWK,YACnEX,EAAKM,yEAGhB,SAAON,yBC9BF,SAASY,EAAOC,GACrB,GAAIA,EAAEC,SAAU,CACdC,IAAMC,EAAIH,EAAEC,SAASd,KACjBgB,GAAKA,EAAEC,SAAQJ,EAAEI,OAASD,EAAEC,QAElC,MAAMJ,ECAD,SAAeK,EAAgBC,EAAUC,OAAEC,OAAIC,SAA/C,iCACL,IACEP,IAAMQ,EAAWJ,EAASK,gBAAOpB,UACxBA,EAAGiB,KAAOA,GAAMjB,EAAGkB,OAASA,IAClC,QAAQD,OAAIC,GACf,SAAOd,OAAOiB,UAAWF,UAClBV,GACPD,EAAMC,gBCLV,SAAea,EAAMN,EAAoBD,OAAlBE,OAAIC,SAAMK,SAAjC,uCACmB,OAAMT,EAAeC,MAAYE,OAAIC,IAArCjB,qBACjB,IADMkB,EAAWK,GACJC,cAAe,OAAMC,EAAkBP,EAAUJ,GAAlCd,2FAE5B,OADIsB,IAAMJ,EAASI,KAAOA,KACnB5B,EAAYwB,+DAqCrB,SAAsBO,EAAmB9B,EAAMmB,GAAxC,yCAEDY,GAAsB,2BAEV,OAHRF,EAAkB7B,iBAGVK,+BAAA2B,uGAAPrB,2BAEP,GAFOA,YAEHkB,EAAclB,GAAKX,MAAQC,MAAMC,QAAQ2B,EAAclB,GAAKX,MAC9D,OAjCN,SAA0BA,EAAMmB,EAAUR,GAA1C,0KAEWsB,gBACcP,EAAKO,EAAUd,GAArBd,4BAAfL,EAAKW,GAAKuB,KAAKC,mCADI,OADrBnC,EAAKW,MACsBX,EAAK6B,cAAclB,GAAKX,KAA9BK,6NAAA+B,wFA+BXC,CAAUrC,EAAMmB,EAAUR,GAAhCN,4BACA0B,GAAsB,oDAEjB,CAAA,GAAIF,EAAclB,GAAKX,KAC5B,OAtBN,SAA2BA,EAAMmB,EAAUR,GAA3C,iCACc,OAAMe,EAAK1B,EAAK6B,cAAclB,GAAKX,KAAMmB,GAAzCd,4BAAZL,EAAKW,GAAO2B,SACLtC,EAAKW,GAAKkB,8CAoBPU,CAAWvC,EAAMmB,EAAUR,GAAjCN,4BACA0B,GAAsB,uVAM1B,OAFIA,UAA4B/B,EAAK6B,gBAE9B7B,4CCjBT,SAAsBwC,EAAaC,GAA5B,iCAIL,GAAIA,EAAIzC,MAAQyC,EAAIzC,KAAKO,cAAgBN,MAAa,OAjDxD,SAAiCwC,GAAjC,sKACWC,iBACP,GAAID,EAAItB,SAAkB,OAAMW,EAAkBY,EAAOD,EAAItB,UAAnCd,4BAARqC,EAAQC,iEAC1B,GAAID,EAAMpC,WAAoB,OAAMP,EAAY2C,GAAlBrC,4BAARqC,EAAQE,wEAC9BH,EAAIzC,KAAKyC,EAAIzC,KAAK6C,QAAQH,IAAUA,sDAHpB,OAAMD,EAAIzC,KAAVK,6NAAAyC,qCAKlB,SAAOL,2CA2CqDM,CAAiBN,GAAvBpC,4BAANoC,EAAMO,oDAEjD,CAAA,GAAIP,EAAItB,SAAqB,OAAMW,EAAkBW,EAAIzC,KAAMyC,EAAItB,UAAtCd,4BAAXoC,EAAIzC,KAAOiD,sHAKlC,UAHOR,EAAItB,SAGPsB,EAAIzC,MAAQyC,EAAIzC,KAAKM,WAAuB,OAAMP,EAAY0C,EAAIzC,MAAtBK,4BAAXoC,EAAIzC,KAAO4B,iEAEhD,SAAOa,0BCpET,SAASS,EAAUT,EAAKU,GACtBC,IAAIC,EAAQ,GACZ,IAAKD,IAAIzC,KAAO8B,EAAK,CACnBW,IAAIV,EAAQD,EAAI9B,GACZwC,IAAOE,GAAS,IAAIF,GACOE,GAAV,iBAAVX,EAA6B,IAAI/B,MAAOuC,EAASR,GAC9C,IAAI/B,OAAQ+B,EAE5B,OAAOW,EAUT,SAAgBA,EAAOC,EAAQC,mBAAS,GACtCH,IAAIC,EAAQ,GACZ,IAAKD,IAAID,KAASG,EAAQ,CACxBF,IAAIV,EAAQY,EAAOH,GACYE,GAAV,iBAAVX,EAA6BQ,EAASR,EAAOS,GAC1C,IAAIA,MAAST,EAG7B,OADAW,EAAQG,UAAUH,EAAMI,MAAM,IACvBH,EAAUC,MAAaF,EAAUA,EAAS,GCxBnDtC,IAAM2C,WAAcC,EAAQhD,UAAWgD,6BAAiChD,oBAgBxE,SAAsBiD,EAAWC,EAAOpB,EAAUkB,GAA3C,yCAAoD,6CACzD,IAEE,GAAIlB,EAAIlC,cAAgBC,QAAsC,IAA5BA,OAAOC,KAAKgC,GAAKqB,OACjD,MAAM,IAAIC,MAASJ,kCAErB5C,IAAMO,EAAO0C,KAAKC,OAAOD,KAAKE,MAAML,IAC9B7D,QAASsB,GAGf,GAAe,SAAXqC,IAAsBlB,EAAIpB,GAC5B,MAAM,IAAI0C,MAASJ,6BAAiCrC,WAIvC,SAAXqC,IACF3D,EAAKqB,GAAKoB,EAAIpB,GAAG8C,8BAMjB,GAAiB,OAAb1B,EAAI9B,IAAiB8B,EAAI9B,GAAKJ,cAAgBC,OAAQ,CACxD,GAA2B,iBAAhBiC,EAAI9B,GAAKU,GAKb,MAAM,IAAI0C,MAAML,EAAWC,EAAQhD,IAJnCX,EAAK6B,gBAAe7B,EAAK6B,kBAEzBY,EAAI9B,GAAKW,OAAMmB,EAAI9B,GAAKW,KAAO0C,EAAKC,OAAOD,EAAKE,MAAMvD,KAC3DX,EAAK6B,cAAclB,IAASX,KAAMQ,OAAOiB,OAAOgB,EAAI9B,UAGjD,GAAiB,OAAb8B,EAAI9B,IAAiBV,MAAMC,QAAQuC,EAAI9B,IAAO,CAEvDI,IAAMqD,EAAUJ,EAAKC,OAAOD,EAAKE,MAAMvD,IAClCX,EAAK6B,gBAAe7B,EAAK6B,kBAC9B7B,EAAK6B,cAAclB,IAASX,KAAMyC,EAAI9B,GAAKR,aAAIkE,GAC7C,IAAKA,EAAKhD,GAAI,MAAM,IAAI0C,MAAML,EAAWC,EAAQhD,IACjD,OACEU,GAAIgD,EAAKhD,GACTC,KAAM+C,EAAK/C,MAAQ8C,UAGN,OAARzD,GAAwB,SAARA,IACpBX,EAAKM,aAAYN,EAAKM,eAC3BN,EAAKM,WAAWK,GAAO8B,EAAI9B,KAvB/B,IAAKyC,IAAIzC,KAAO8B,OA0BhB,eAASzC,UACFa,GACP,MAAMD,EAAMC,sCCrDDyD,UAAKA,EAAEC,QAAQ,gDAAwCC,UAASA,EAAMf,MAAM,GAAGgB,2BCH/EH,UAAKA,EAAEI,OAAO,GAAGC,cAAgBL,EAAEb,MAAM,GAAGc,QAAQ,4CAAoCC,SAAS,IAAMA,EAAMG,2BCA7GL,UAAKA,EAAEI,OAAO,GAAGC,cAAgBL,EAAEb,MAAM,GAAGc,QAAQ,4CAAoCC,SAAS,IAAMA,EAAMG"}