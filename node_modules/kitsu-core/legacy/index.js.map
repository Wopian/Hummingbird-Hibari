{"version":3,"file":"index.js","sources":["../src/error/index.js","../src/query/index.js","../src/deattribute/index.js","../src/filterIncludes/index.js","../src/linkRelationships/index.js","../src/deserialise/index.js","../src/serialise/index.js","../src/camel/index.js","../src/kebab/index.js","../src/snake/index.js"],"sourcesContent":["/**\n * Mutates an error and rethrows it\n *\n * @param {Object} E The Error\n * @throws {Object} The mutated Error\n */\nexport function error (E) {\n  if (E.response) {\n    const e = E.response.data\n    if (e && e.errors) E.errors = e.errors\n  }\n  throw E\n}\n","function deObject (obj, param) {\n  let query = ''\n  for (let key in obj) {\n    let value = obj[key]\n    if (param) query += `&${param}`\n    if (typeof value === 'object') query += `[${key}]${deObject(value)}`\n    else query += `[${key}]=${value}`\n  }\n  return query\n}\n\n/**\n * Constructs a URL query string for JSON:API parameters\n *\n * @param {Object} params Parameters to parse\n * @param {boolean} prefix Prefix returned string with `?` (default `false`)\n * @returns {string} URL query string\n */\nexport function query (params, prefix = false) {\n  let query = ''\n  for (let param in params) {\n    let value = params[param]\n    if (typeof value === 'object') query += deObject(value, param)\n    else query += `&${param}=${value}`\n  }\n  query = encodeURI(query.slice(1))\n  return params ? (prefix ? `?${query}` : query) : ''\n}\n","/**\n * Hoists attributes to be top-level\n *\n * @param {Object|Array} data Resource data\n * @returns {Object|Array} Deattributed resource data\n *\n * @example <caption>Deattribute an array of resources</caption>\n * // JSON:API 'data' field\n * const data = [\n *   {\n *     id: '1',\n *     type: 'users',\n *     attributes: { slug: 'wopian' }\n *   }\n * ]\n *\n * const output = await deattribute(data) // [ { id: '1', type: 'users', slug: 'wopian' } ]\n *\n * @example <caption>Deattribute a resource</caption>\n * // JSON:API 'data' field\n * const data = {\n *   id: '1',\n *   type: 'users',\n *   attributes: { slug: 'wopian' }\n * }\n *\n * const output = await deattribute(data) // { id: '1', type: 'users', slug: 'wopian' }\n */\nexport async function deattribute (data) {\n  if (typeof data === 'object' && data !== null) {\n    if (Array.isArray(data)) await data.map(async el => deattribute(el))\n    else if (data.attributes && data.attributes.constructor === Object) {\n      Object.keys(data.attributes).forEach(key => { data[key] = data.attributes[key] })\n      delete data.attributes\n    }\n  }\n  return data\n}\n","import { error } from '../error'\n\n/**\n * Filters includes for the specific relationship\n *\n * @param {Object} included The response included object\n * @param {Object} opts\n * @param {string} opts.id The relationship ID\n * @param {string} opts.type The relationship type\n * @returns {Array} The matched includes\n */\nexport async function filterIncludes (included, { id, type }) {\n  try {\n    const filtered = included.filter(el => {\n      return el.id === id && el.type === type\n    })[0] || { id, type }\n    return Object.assign({}, filtered)\n  } catch (E) {\n    error(E)\n  }\n}\n","import { deattribute } from '../deattribute'\nimport { filterIncludes } from '../filterIncludes'\n\n/**\n * Core function to link relationships to included data\n *\n * @param {Object} resource The included resource\n * @param {string} resource.id Resource ID\n * @param {string} resource.type Resource type\n * @param {Object} resource.meta Meta information\n * @param {Object} included The response included object\n * @private\n */\nasync function link ({ id, type, meta }, included) {\n  const filtered = await filterIncludes(included, { id, type })\n  if (filtered.relationships) await linkRelationships(filtered, included)\n  if (meta) filtered.meta = meta\n  return deattribute(filtered)\n}\n\n/**\n * Helper function for multiple relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkArray (data, included, key) {\n  data[key] = []\n  for (let resource of await data.relationships[key].data) {\n    data[key].push(await link(resource, included))\n  }\n}\n\n/**\n * Helper function for single relationships\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n * @param {string} key Name of the relationship item\n * @private\n */\nasync function linkObject (data, included, key) {\n  data[key] = await link(data.relationships[key].data, included)\n  delete data[key].relationships\n}\n\n/**\n * Links relationships to included data\n *\n * @param {Object} data The response data object\n * @param {Object} included The response included object\n */\nexport async function linkRelationships (data, included) {\n  const { relationships } = data\n  let removeRelationships = false\n\n  for (let key in await relationships) {\n    // Relationship contains collection of resources\n    if (relationships[key].data && Array.isArray(relationships[key].data)) {\n      await linkArray(data, included, key)\n      removeRelationships = true\n    // Relationship contains a single resource\n    } else if (relationships[key].data) {\n      await linkObject(data, included, key)\n      removeRelationships = true\n    }\n  }\n\n  if (removeRelationships) delete data.relationships\n\n  return data\n}\n","import { deattribute } from '../deattribute'\nimport { linkRelationships } from '../linkRelationships'\n\n/**\n * Deserialises an array from a JSON-API structure\n *\n * @param {*} obj The response\n * @returns {Object} The deserialised response\n * @private\n */\nasync function deserialiseArray (obj) {\n  for (let value of await obj.data) {\n    if (obj.included) value = await linkRelationships(value, obj.included)\n    if (value.attributes) value = await deattribute(value)\n    obj.data[obj.data.indexOf(value)] = value\n  }\n  return obj\n}\n\n/**\n * Deserialises a JSON-API response\n *\n * @param {Object} obj The response\n * @returns {Object} The deserialised response\n *\n * @example <caption>Deserialise with a basic data object</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     attributes: { liked: true }\n *   },\n *   meta: { hello: 'world' }\n * }) // { data: { id: '1', liked: true }, meta: { hello: 'world' } }\n *\n * @example <caption>Deserialise with relationships</caption>\n * await deserialise({\n *   data: {\n *     id: '1',\n *     relationships: {\n *       user: {\n *         data: {\n *           type: 'users',\n *           id: '2' }\n *       }\n *     }\n *   },\n *   included: [\n *     {\n *       type: 'users',\n *       id: '2',\n *       attributes: { slug: 'wopian' }\n *     }\n *   ]\n * }) // { data: { id: '1', user: { type: 'users', id: '2', slug: 'wopian' } } }\n */\nexport async function deserialise (obj) {\n  // Collection of resources\n  // Note: constructor is currently faster than isArray()\n  // http://jsben.ch/QgYAV\n  if (obj.data && obj.data.constructor === Array) obj = await deserialiseArray(obj)\n  // Single resource with included relationships\n  else if (obj.included) obj.data = await linkRelationships(obj.data, obj.included)\n\n  delete obj.included\n\n  // Move attributes to the parent object\n  if (obj.data && obj.data.attributes) obj.data = await deattribute(obj.data)\n\n  return obj\n}\n","import { error } from '../error'\n\nconst requiresID = (method, key) => `${method} requires an ID for the ${key} relationships`\n\n/**\n * Serialises an object into a JSON-API structure\n *\n * @param {string} model Request model\n * @param {Object} obj The data\n * @param {string} method Request type\n * @returns {Object} The serialised data\n *\n * @example <caption>Due to its usage in kitsu, it **MUST** be called with **this** set in 5.0.x</caption>\n * import { serialise, camel, kebab } from 'kitsu-core'\n * import plural from 'pluralize'\n *\n * const output = await serialise.apply({ camel, resCase: kebab, plural }, [ model, obj, 'PATCH' ])\n */\nexport async function serialise (model, obj = {}, method = 'POST') {\n  try {\n    // Check if obj is not an object or empty\n    if (obj.constructor !== Object || Object.keys(obj).length === 0) {\n      throw new Error(`${method} requires a JSON object body`)\n    }\n    const type = this.plural(this.camel(model))\n    const data = { type }\n\n    // A POST request is the only request to not require an ID\n    if (method !== 'POST' && !obj.id) {\n      throw new Error(`${method} requires an ID for the ${type} type`)\n    }\n\n    // Add ID to data - MUST be a string\n    if (method !== 'POST') {\n      data.id = obj.id.toString()\n    }\n\n    // Attributes and relationships\n    for (let key in obj) {\n      // Check if it's a relationship\n      if (obj[key] !== null && obj[key].constructor === Object) {\n        if (typeof obj[key].id === 'string') {\n          if (!data.relationships) data.relationships = {}\n          // Guess relationship type if not provided\n          if (!obj[key].type) obj[key].type = this.plural(this.camel(key))\n          data.relationships[key] = { data: Object.assign(obj[key]) }\n        } else throw new Error(requiresID(method, key))\n      // Check if it's a relationship array\n      } else if (obj[key] !== null && Array.isArray(obj[key])) {\n        // validate whole array\n        const keytype = this.plural(this.camel(key))\n        if (!data.relationships) data.relationships = {}\n        data.relationships[key] = { data: obj[key].map(elem => {\n          if (!elem.id) throw new Error(requiresID(method, key))\n          return {\n            id: elem.id,\n            type: elem.type || keytype\n          }\n        }) }\n      } else if (key !== 'id' && key !== 'type') { // Its an attribute\n        if (!data.attributes) data.attributes = {}\n        data.attributes[key] = obj[key]\n      }\n    }\n    return { data }\n  } catch (E) {\n    throw error(E)\n  }\n}\n","/**\n * Converts kebab-case and snake_case into camelCase\n *\n * @name camel\n * @param {string} s String to convert\n * @returns {string} camelCase formatted string\n *\n * @example <caption>Convert kebab-case</caption>\n * camel('hello-world') // 'helloWorld'\n *\n * @example <caption>Convert snake_case</caption>\n * camel('hello_world') // 'helloWorld'\n */\nexport default s => s.replace(/[-_][a-z\\u00E0-\\u00F6\\u00F8-\\u00FE]/g, match => match.slice(1).toUpperCase())\n","/**\n * Converts camelCase into kebab-case\n *\n * @name kebab\n * @param {string} s camelCase string\n * @returns {string} kekab-case formatted string\n *\n * @example\n * kebab('helloWorld') // 'hello-world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '-' + match.toLowerCase())\n","/**\n * Converts camelCase into snake_case\n *\n * @name snake\n * @param {string} s camelCase string\n * @returns {string} snake_case formatted string\n *\n * @example\n * snake('helloWorld') // 'hello_world'\n */\nexport default s => s.charAt(0).toLowerCase() + s.slice(1).replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, match => '_' + match.toLowerCase())\n"],"names":["error","E","response","e","data","errors","deObject","obj","param","query","key","value","params","prefix","encodeURI","slice","Array","isArray","map","el","deattribute","attributes","constructor","Object","keys","forEach","included","id","type","filter","assign","filtered","meta","filterIncludes","relationships","linkRelationships","link","resource","push","linkArray","linkObject","removeRelationships","indexOf","deserialiseArray","requiresID","method","model","length","Error","plural","camel","toString","_this","keytype","elem","s","replace","match","toUpperCase","charAt","toLowerCase"],"mappings":"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"}